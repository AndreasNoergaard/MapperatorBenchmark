//------------------------------------------------------------------------------
// <auto-generated>
//     Code generated by Mapperator. Go to http://mapperator.net for more information.
//     Version: 1.0.0-beta
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using BenchmarkFastMapper.Classes;
using Mapperator.Core;


namespace MapperProject.Mappers
{
    
    
    public class CustomerToCustomerDTOMapper : MapperBase<BenchmarkFastMapper.Classes.Customer, BenchmarkFastMapper.Classes.CustomerDTO>
    {
        
        private CustomerToCustomerDTOMapper()
        {
        }
        
        public static CustomerToCustomerDTOMapper Instance
        {
            get
            {
                return Nested.InstanceInNested;
            }
        }
        
        protected override void Map(BenchmarkFastMapper.Classes.Customer source, ref BenchmarkFastMapper.Classes.CustomerDTO target)
        {
            target.Id = source.Id;
            target.Name = source.Name;
            target.Address = source.Address;
            target.HomeAddress = AddressToAddressDTOMapper.Instance.Map(source.HomeAddress);
            target.AddressCity = source.Address.City;
            target.Addresses = Mapperator.Core.Utility.MapIEnumerableToArray(source.Addresses, AddressToAddressDTOMapper.Instance.Map);
            target.WorkAddresses = Mapperator.Core.Utility.MapIEnumerableToTCollection<BenchmarkFastMapper.Classes.Address, BenchmarkFastMapper.Classes.AddressDTO, System.Collections.Generic.List<BenchmarkFastMapper.Classes.AddressDTO>>(source.WorkAddresses, AddressToAddressDTOMapper.Instance.Map);
        }
        
        private class Nested
        {
            
            internal static readonly CustomerToCustomerDTOMapper InstanceInNested = new CustomerToCustomerDTOMapper();
            
            static Nested()
            {
            }
        }
    }
}
